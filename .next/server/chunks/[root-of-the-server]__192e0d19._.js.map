{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/ExpenceXpert/src/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI!;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\ninterface MongooseCache {\r\n  conn: typeof mongoose | null;\r\n  promise: Promise<typeof mongoose> | null;\r\n}\r\n\r\ndeclare global {\r\n  var mongoose: MongooseCache | undefined;\r\n}\r\n\r\nlet cached: MongooseCache = global.mongoose || { conn: null, promise: null };\r\n\r\nif (!global.mongoose) {\r\n  global.mongoose = cached;\r\n}\r\n\r\nasync function connectDB(): Promise<typeof mongoose> {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n\r\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (e) {\r\n    cached.promise = null;\r\n    throw e;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAWA,IAAI,SAAwB,OAAO,QAAQ,IAAI;IAAE,MAAM;IAAM,SAAS;AAAK;AAE3E,IAAI,CAAC,OAAO,QAAQ,EAAE;IACpB,OAAO,QAAQ,GAAG;AACpB;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/ExpenceXpert/src/models/User.ts"],"sourcesContent":["import mongoose, { Document, Schema, Model } from 'mongoose';\r\n\r\nexport interface IUser extends Document {\r\n  name: string;\r\n  email: string;\r\n  password?: string; // Optional for OAuth users\r\n  image?: string;\r\n  emailVerified?: Date;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst UserSchema = new Schema<IUser>({\r\n  name: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    unique: true,\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: false, // Optional for OAuth users\r\n  },\r\n  image: {\r\n    type: String,\r\n  },\r\n  emailVerified: {\r\n    type: Date,\r\n  },\r\n}, {\r\n  timestamps: true,\r\n});\r\n\r\nconst User: Model<IUser> = mongoose.models.User || mongoose.model<IUser>('User', UserSchema);\r\n\r\nexport default User;"],"names":[],"mappings":";;;AAAA;;AAYA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAAQ;IACnC,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,QAAQ;IACV;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;IACA,OAAO;QACL,MAAM;IACR;IACA,eAAe;QACb,MAAM;IACR;AACF,GAAG;IACD,YAAY;AACd;AAEA,MAAM,OAAqB,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ;uCAElE","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/ExpenceXpert/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth';\r\nimport GoogleProvider from 'next-auth/providers/google';\r\nimport { MongoDBAdapter } from '@next-auth/mongodb-adapter';\r\nimport { MongoClient } from 'mongodb';\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport connectDB from \"@/lib/mongodb\";\r\nimport User from \"@/models/User\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nconst client = new MongoClient(process.env.MONGODB_URI!);\r\nconst clientPromise = client.connect();\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  adapter: MongoDBAdapter(clientPromise),\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"text\", placeholder: \"you@example.com\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials) return null;\r\n        const { email, password } = credentials;\r\n        \r\n        await connectDB();\r\n        \r\n        const user = await User.findOne({ email });\r\n        \r\n        if (user) {\r\n          // Compare the provided password with the hashed password in the database\r\n          const isMatch = await bcrypt.compare(password, user.password);\r\n          \r\n          if (isMatch) {\r\n            // Return user object if authentication is successful\r\n            return { id: user._id.toString(), name: user.name, email: user.email };\r\n          }\r\n        }\r\n        \r\n        // Return null if user not found or password does not match\r\n        return null;\r\n      },\r\n    }),\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n    }),\r\n  ],\r\n  session: {\r\n    strategy: 'jwt',\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user, account }) {\r\n      if (user) {\r\n        token.id = user.id;\r\n      }\r\n      if (account) {\r\n        token.accessToken = account.access_token;\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (token) {\r\n        session.user.id = token.id as string;\r\n      }\r\n      return session;\r\n    },\r\n    async signIn({ user, account, profile }) {\r\n      // Allow all sign-ins\r\n      return true;\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: '/login',\r\n  },\r\n};"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAEA,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,QAAQ,GAAG,CAAC,WAAW;AACtD,MAAM,gBAAgB,OAAO,OAAO;AAE7B,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,8QAAA,CAAA,iBAAc,AAAD,EAAE;IACxB,WAAW;QACT,CAAA,GAAA,sQAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;oBAAQ,aAAa;gBAAkB;gBACtE,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,OAAO;gBACzB,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;gBAE5B,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAS,AAAD;gBAEd,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;oBAAE;gBAAM;gBAExC,IAAI,MAAM;oBACR,yEAAyE;oBACzE,MAAM,UAAU,MAAM,wLAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;oBAE5D,IAAI,SAAS;wBACX,qDAAqD;wBACrD,OAAO;4BAAE,IAAI,KAAK,GAAG,CAAC,QAAQ;4BAAI,MAAM,KAAK,IAAI;4BAAE,OAAO,KAAK,KAAK;wBAAC;oBACvE;gBACF;gBAEA,2DAA2D;gBAC3D,OAAO;YACT;QACF;QACA,CAAA,GAAA,iQAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YAChC,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,IAAI,SAAS;gBACX,MAAM,WAAW,GAAG,QAAQ,YAAY;YAC1C;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;QACA,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE;YACrC,qBAAqB;YACrB,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;AACF","debugId":null}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/ExpenceXpert/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth';\r\nimport { authOptions } from '@/lib/auth';\r\n\r\nconst handler = NextAuth(authOptions);\r\n\r\nexport { handler as GET, handler as POST };"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,mPAAA,CAAA,UAAQ,AAAD,EAAE,oHAAA,CAAA,cAAW","debugId":null}}]
}